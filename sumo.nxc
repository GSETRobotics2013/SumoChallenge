#define PORT_RMOTOR OUT_C
#define PORT_LMOTOR OUT_B
#define PORT_MOTORS OUT_BC
#define PORT_RLIGHT IN_2
#define PORT_LLIGHT IN_3
#define PORT_US     IN_4

#define TARGET_TIMEOUT 500

#define STATE_SEARCHING 0
#define STATE_CHARGING  1
#define STATE_REVERSING 2
#define STATE_DODGING   3

bool enemyFound(byte portUS) {
    return SensorUS(portUS) < 40;
}

task main() {
    SetSensorUltrasonic(PORT_US);
    SetSensorLight(PORT_RLIGHT);
    SetSensorType(PORT_LLIGHT, SENSOR_TYPE_LIGHT);

    PlayTone(TONE_B5,100);
    Wait(990);
    PlayTone(TONE_C6,100);
    Wait(990);
    PlayTone(TONE_C6,100);
    Wait(990);
    PlayTone(TONE_C6,100);
    Wait(990);
    PlayTone(TONE_C6,100);
    Wait(990);
    PlayTone(TONE_D6,500);
    unsigned int prevSeenTime = 0;
    long chargeBegin = 0;
    int rlightBaseline = Sensor(PORT_RLIGHT),
        llightBaseline = Sensor(PORT_LLIGHT)/10;
    bool foundTarget;
    unsigned int time;
    int rlight,llight;
    int state = STATE_SEARCHING;
    bool leftFound,rightFound;
    long startCount;
    int turnDir = 1;
    int prevState;
    int prevDist = 255;

    while(1) {
        time = CurrentTick();
        rlight = Sensor(PORT_RLIGHT);
        llight = Sensor(PORT_LLIGHT)/10;
        leftFound  = (llight > (llightBaseline+10));
        rightFound = (rlight > (rlightBaseline+10));
        if(leftFound) {
            turnDir = 1;
        } else if(rightFound) {
            turnDir = -1;
        }
        if(leftFound || rightFound) {
            if(state != STATE_REVERSING) {
                Off(PORT_MOTORS);
                //PlayTone(TONE_B5,200);
            }
            state = STATE_REVERSING;
            
            startCount = MotorRotationCount(PORT_LMOTOR);
        }
    
        if((state == STATE_SEARCHING || state == STATE_CHARGING) &&
           enemyFound(PORT_US)) {
            if(state != STATE_CHARGING) {
                //Off(PORT_MOTORS);
                state = STATE_CHARGING;
                chargeBegin = MotorRotationCount(PORT_LMOTOR);
            }
            prevSeenTime = time;
        }
        prevState = state;
        switch(state) {
        case STATE_SEARCHING:
            OnFwd(PORT_LMOTOR,turnDir*-100);
            OnFwd(PORT_RMOTOR,turnDir*100);
            break;
        case STATE_CHARGING:
            long chargeLength = abs(chargeBegin
                                    -MotorRotationCount(PORT_LMOTOR));
            if(chargeLength < 200) {
                OnFwdSync(PORT_MOTORS,-100,turnDir);
            } else { 
                OnFwd(PORT_MOTORS,-100);
            }
            if(time-prevSeenTime >= TARGET_TIMEOUT) {
                state = STATE_SEARCHING;
            } else if(chargeLength > 1200) {
                Off(PORT_MOTORS);
                startCount = MotorRotationCount(PORT_RMOTOR);
                state = STATE_DODGING;
            }
            break;
        case STATE_REVERSING:
            OnFwd(PORT_MOTORS,100);
            if(abs(startCount-MotorRotationCount(PORT_LMOTOR)) > 200) {
                state = STATE_SEARCHING;
            }
            break;
        case STATE_DODGING:
            OnFwd(PORT_RMOTOR,100);
            OnFwd(PORT_LMOTOR,10);
            if(abs(startCount-MotorRotationCount(PORT_RMOTOR)) > 1600) {
                state = STATE_SEARCHING;
            }
            break;
        }
        if(state != prevState) {
            Off(PORT_MOTORS);
        }
        Wait(10);
    }
}


